// Generated by CoffeeScript 1.6.1
(function() {
  var animation, async, bs_item_s, bs_static, get_outer_width, get_show_hide_items, init, memoize_width, process, read_width, show_expander, toggle_items;

  async = require('async');

  bs_item_s = '.bs-item';

  bs_static = '.bs-static';

  memoize_width = function(item) {
    return $(item).data({
      width: $(item).outerWidth()
    });
  };

  read_width = function(item) {
    return $(item).data().width;
  };

  animation = {
    hide: function(item, cb) {
      var animate_cb;
      animate_cb = function() {
        $(item).hide();
        return cb();
      };
      memoize_width(item);
      return $(item).animate({
        width: "0px",
        opacity: 0
      }, animate_cb);
    },
    show: function(item, cb) {
      $(item).show();
      return $(item).animate({
        width: read_width(item),
        opacity: 1
      }, function() {
        return cb();
      });
    }
  };

  get_outer_width = function(items) {
    var width_count_reduce_func;
    width_count_reduce_func = function(a, b) {
      return a += ($(b)).outerWidth();
    };
    return items.reduce(width_count_reduce_func, 0);
  };

  init = function(breadcumbs_wrapper) {
    var collapsable_items, expander, static_items;
    collapsable_items = ($("" + bs_item_s + ":not(" + bs_static + ")")).toArray();
    static_items = ($(bs_static)).toArray();
    expander = $(collapsable_items[0]).clone();
    expander.text('...');
    expander.css({
      cursor: "pointer"
    });
    return process({
      result_width: get_outer_width(collapsable_items.concat(static_items)),
      allowed_width: $(breadcumbs_wrapper).width(),
      collapsable_items: collapsable_items,
      static_items: static_items,
      expander: expander
    });
  };

  toggle_items = function(collapsable_items, effect, action, cb) {
    var item_action;
    if (action == null) {
      action = "show";
    }
    item_action = effect != null ? action === "show" ? effect.show : effect.hide : action === "show" ? function(item, cb) {
      $(item).show();
      return cb();
    } : function(item, cb) {
      $(item).hide();
      return cb();
    };
    return async.map(collapsable_items, item_action, function(err, items) {
      items.map(function(i) {
        return ($(i)).hide();
      });
      return typeof cb === "function" ? cb() : void 0;
    });
  };

  show_expander = function(expander, item_after) {
    return expander.insertAfter(item_after);
  };

  get_show_hide_items = function(from_head, items, static_items, allowed_width) {
    var items_to_hide, items_to_show, reduce_by_allowed_width, width, _ref;
    if (from_head == null) {
      from_head = true;
    }
    items.reverse();
    reduce_by_allowed_width = function(a, b) {
      var current_width, new_width, _items_to_hide, _items_to_show;
      current_width = a[0], _items_to_hide = a[1], _items_to_show = a[2];
      new_width = ($(b)).outerWidth() + current_width;
      return a = new_width <= allowed_width ? [new_width, _items_to_hide, _items_to_show.concat(b)] : [new_width, _items_to_hide.concat(b), _items_to_show];
    };
    _ref = items.reduce(reduce_by_allowed_width, [get_outer_width(static_items), [], []]), width = _ref[0], items_to_hide = _ref[1], items_to_show = _ref[2];
    return [items_to_hide, items_to_show];
  };

  process = function(_arg) {
    var allowed_width, collapsable_items, expander, from_head, from_head_hide_items, from_head_show_items, from_tail_hide_items, from_tail_show_items, result_width, static_items, _ref, _ref1;
    result_width = _arg.result_width, allowed_width = _arg.allowed_width, static_items = _arg.static_items, expander = _arg.expander, collapsable_items = _arg.collapsable_items;
    if (result_width > allowed_width) {
      _ref = get_show_hide_items(true, collapsable_items, static_items, allowed_width), from_head_hide_items = _ref[0], from_head_show_items = _ref[1];
      _ref1 = get_show_hide_items(false, collapsable_items, static_items, allowed_width), from_tail_hide_items = _ref1[0], from_tail_show_items = _ref1[1];
      toggle_items(from_head_hide_items, animation, "hide", function() {
        return show_expander(expander, from_head_hide_items[0]);
      });
      from_head = true;
      return $(expander).click(function(ev) {
        var hide_from_head_visible, hide_from_tail_head_visible, show_from_tail_tail_visible, show_from_tail_visible;
        if (from_head === true) {
          hide_from_head_visible = function(cb) {
            return toggle_items(from_tail_hide_items, animation, "hide", function() {
              return cb();
            });
          };
          show_from_tail_visible = function(cb) {
            return toggle_items(from_tail_show_items, animation, "show", function() {
              show_expander(expander, from_tail_show_items.slice(-1));
              return cb();
            });
          };
          return async.parallel([hide_from_head_visible, show_from_tail_visible], function() {
            return from_head = false;
          });
        } else {
          hide_from_tail_head_visible = function(cb) {
            return toggle_items(from_head_hide_items, animation, "hide", function() {
              return cb();
            });
          };
          show_from_tail_tail_visible = function(cb) {
            return toggle_items(from_tail_hide_items, animation, "show", function() {
              show_expander(expander, from_head_hide_items[0]);
              return cb();
            });
          };
          return async.parallel([hide_from_tail_head_visible, show_from_tail_tail_visible], function() {
            return from_head = true;
          });
        }
      });
    }
  };

  module.exports = init;

}).call(this);
